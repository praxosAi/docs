{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.praxos.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/add-source": {
      "post": {
        "summary": "Upload a PDF file for processing",
        "description": "Uploads a PDF file, stores it in praxos, and initiates indexing",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "PDF file to upload"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File successfully uploaded and indexing started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid file or missing file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key or reached maximum sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSourceErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "summary": "Submit query jobs for processing",
        "description": "Submit one or more query jobs to process sources using specified interfaces. If a request is rejected, niehter of the queries will be processed.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Query jobs successfully submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid request body or IDs (source_ids, interface_id).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseWithDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/get-results": {
      "post": {
        "summary": "Get results for specified jobs",
        "description": "Retrieve results for one or more jobs by their IDs",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResultsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved job results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResultsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/environments": {
      "post": {
        "summary": "Create a new environment",
        "description": "Creates a new environment, the name of the environment is required and must be unique",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the environment"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the environment"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Environment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all environments",
        "description": "Retrieves environment(s) based on the provided query parameters. if the id or name is provided, the environment with the given id or name will be returned. if no parameters are provided, all environments will be returned as a list of environments.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of the environment"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Name of the environment"
          }
        ],
        "responses": {
          "200": {
            "description": "List of environments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },



    "/plants": {
      "get": {
        "description": "Returns all plant from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": ["error"]
      },
      "ErrorResponseWithDetails": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Detailed error messages"
          }
        },
        "required": ["error"]
      },

      "Environment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the environment"
          },
          "name": {
            "type": "string",
            "description": "Name of the environment"
          },
          "description": {
            "type": "string",
            "description": "Description of the environment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp of the environment"
          }
        },
        "required": ["id", "name", "created_at"]
      },



      "AddSourceResponse": {
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "ID of the created source"
          }
        },
        "required": ["source_id"]
      },
      "QueryRequest": {
        "type": "object",
        "properties": {
          "queries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of source IDs to query"
                },
                "interface_id": {
                  "type": "string",
                  "description": "ID of the interface to use for the query"
                }
              },
              "required": ["source_ids", "interface_id"]
            }
          }
        },
        "required": ["queries"]
      },

      "QuerySuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "queries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "interface_id": {
                  "type": "string"
                },
                "job_id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["message", "queries"]
      },

      "GetResultsRequest": {
        "type": "object",
        "properties": {
          "job_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of job IDs to retrieve results for"
          }
        },
        "required": ["job_ids"]
      },

      "JobResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["not_found", "initialized", "sources_indexing", "processing", "success"],
            "description": "Status of the job"
          },
          "results": {
            "type": "object",
            "description": "Job results (only present when status is 'success'). It will match to the interface schema.",
            "additionalProperties": true
          }
        },
        "required": ["status"]
      },

      "GetResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JobResult"
            },
            "description": "Map of job IDs to their results"
          }
        },
        "required": ["results"]
      },




      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "API-key",
        "description": "API key for authentication"
      }
    }
  }
}